plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.+'
}

import net.minecraftforge.gradle.common.tasks.SignJar

version = "${mc_version}-${mod_version}"
group = 'com.lothrazar.plaingrinder'
archivesBaseName = 'plaingrinder'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {

    mappings channel: 'official', version: '1.19'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

// some IDE's can get the Program arguments here  --mixin mixins.myplugin.json
            //args "--mixin mixins.myplugin.json"
            //property 'mixin', 'mixins.myplugin.json'

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                plaingrinder {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                plaingrinder {
                    source sourceSets.main
                }
            }
        }


    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

	compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
	compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
	// at runtime, use the full JEI
	runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-common:${jei_version}")
	runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")

    //	  implementation fg.deobf("curse.maven:titanium-287342:3346366")
    //  implementation fg.deobf("curse.maven:industrial-foregoing-266515:3386008")
    //  implementation fg.deobf("curse.maven:cofh-core-69162:3249453")
    //  implementation fg.deobf("curse.maven:ensorcellation-349447:3246996")
    //  implementation fg.deobf("curse.maven:mantle-74924:3273201")
    //  implementation fg.deobf("curse.maven:thermal-foundation-222880:3248150")
    //	implementation fg.deobf("curse.maven:mekanism-268560:3206392")
    //  implementation fg.deobf("curse.maven:create-328085:328085")
    //  implementation fg.deobf("curse.maven:ex-nihilo-sequentia-400012:3060647")
    //  implementation fg.deobf("curse.maven:cyclic-239286:3398799")
    //  implementation fg.deobf("curse.maven:cucumber-272335:3187116")
    //  implementation fg.deobf("curse.maven:mystical-agriculture-246640:3152061")
    //  implementation fg.deobf("curse.maven:simple-storage-network-268495:3163007")


    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

repositories {
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = 'https://dvs1.progwml6.com/files/maven/'
    }
    maven {
        name = "curios"
        url = 'https://maven.theillusivec4.top/'
    }
    maven { url = 'https://maven.blamejared.com' }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "plaingrinder",
                "Specification-Vendor"    : "plaingrindersareus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "plaingrindersareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")

                // ,"TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                // "MixinConfigs": "mixins.myplugin.json",
                // "FMLCorePluginContainsFMLMod": "true"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing

//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

task signJar(type: SignJar, dependsOn: jar) {

    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}


//build.dependsOn signJar

task copyJar(type: Copy) {
    from jar
    into "${dist_folder}"
}

//build.finalizedBy copyJar

task cleanJar {
  delete 'build/libs'
}

